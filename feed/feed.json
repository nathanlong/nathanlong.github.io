{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Nathan Long",
	"language": "en",
	"home_page_url": "https://nathan-long.com/",
	"feed_url": "https://nathan-long.com/feed/feed.json",
	"description": "A digital-garden/dumpster fire handcrafted by some ordinary web guy",
  "icon": "https://nathan-long.com/icon-512.png",
  "favicon": "https://nathan-long.com/icon-192.svg",
	"author": {
		"name": "Nathan Long",
		"url": "https://nathan-long.com"
	},
	"items": [
		{
			"id": "https://nathan-long.com/blog/class-regex-for-tailwind-intellisense/",
			"url": "https://nathan-long.com/blog/class-regex-for-tailwind-intellisense/",
			"title": "Custom Class Regex for Tailwind IntelliSense in Neovim",
			"content_html": "<p>Sometimes while using Tailwind, you need to place classes into things that aren't structured like HTML elements. Take a look at this Twig snippet from a Craft site:</p>\n<pre class=\"feature language-twig\"><code class=\"language-twig\"><span class=\"token twig language-twig\"><span class=\"token delimiter punctuation\">{{</span> entry<span class=\"token punctuation\">.</span>primaryDescription <span class=\"token operator\">?</span> tag<span class=\"token punctuation\">(</span><span class=\"token string\"><span class=\"token punctuation\">'</span>div<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  class<span class=\"token punctuation\">:</span> <span class=\"token string\"><span class=\"token punctuation\">'</span>text-body-lg text-rich<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">,</span>\n  html<span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">.</span>primaryDescription<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token delimiter punctuation\">}}</span></span></code></pre>\n<p>This checks for the existence of a field and wraps it in a <code>&lt;div&gt;</code> tag... But that little bit there as <code>class:</code>... If you're running Tailwind in Neovim like me, it doesn't recognize that as a trigger for autocomplete because it wants that sweet, sweet HTML <code>class=</code> attribute.</p>\n<p>And without IntelliSense/autocomplete you're missing a critical piece of the Tailwind authoring experience. You NEED autocomplete when working with Tailwind.</p>\n<p>The fine folks working on Tailwind realized this problem and have exposed some settings to allow custom triggers for whatever wacky format your templating language wants. In fact, they've exposed two methods for us:</p>\n<ol>\n<li>The <a href=\"https://github.com/tailwindlabs/tailwindcss-intellisense#tailwindcssclassattributes\">class attribute</a> setting.</li>\n<li>The experimental <a href=\"https://www.paolotiu.com/blog/get-tailwind-intellisense-anywhere\">class regex setting</a></li>\n</ol>\n<p>We're looking at the second one. Most guides will tell you to plop some JSON in your VSCode settings and it's not immediately clear where the equivalent of this is for Neovim. But hey, you're here now, so I'll show you. You stuff it into your LSP initialization settings for Tailwind, like this:</p>\n<pre class=\"feature language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> lspconfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lspconfig'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> capabilities <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cmp_nvim_lsp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">default_capabilities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> on_attach <span class=\"token operator\">=</span> <span class=\"token comment\">--this is a custom function that sets several options</span>\n\n<span class=\"token comment\">-- The initialization of TailwindCSS LSP</span>\nlspconfig<span class=\"token punctuation\">.</span>tailwindcss<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span> <span class=\"token punctuation\">{</span>\n  on_attach <span class=\"token operator\">=</span> on_attach<span class=\"token punctuation\">,</span>\n  capabilities <span class=\"token operator\">=</span> capabilities<span class=\"token punctuation\">,</span>\n  settings <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    tailwindCSS <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      experimental <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        classRegex <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">\"(?:class: ?)(?:'|\\\"|`)([^\\\"'`]*)(?:'|\\\"|`)\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- Twig, looks for string preceded by 'class:'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This setup assumes a few things:</p>\n<ol>\n<li>You're using <a href=\"https://github.com/neovim/nvim-lspconfig\">nvim-lspconfig</a> to connect to your LSPs.</li>\n<li>You're using <a href=\"https://github.com/hrsh7th/nvim-cmp\">nvim-cmp</a> for autocomplete.</li>\n</ol>\n<p>You can check out my <a href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">earlier post</a> on setting up LSP's or look at my <a href=\"https://github.com/nathanlong/dotfiles/blob/main/nvim/init.lua\">init.lua</a> to see how I've set it up.</p>\n<p>The regex itself is looking for anything inside a string (either <code>&quot;&quot;</code> or <code>''</code>) preceded by <code>class:</code> and 0 to 1 spaces. Tailwind will now helpfully suggest classes once you kick open that string. If you need something different than what's listed here you can check out <a href=\"https://github.com/paolotiu/tailwind-intellisense-regex-list\">this repository of sample regexes you can use</a> for different patterns.</p>\n<p>Happy autocompleting!</p>\n",
			"date_published": "2023-11-29T00:00:00Z"
		}
		,
		{
			"id": "https://nathan-long.com/blog/nathan-uses-this-2023-edition/",
			"url": "https://nathan-long.com/blog/nathan-uses-this-2023-edition/",
			"title": "Nathan Uses This: 2023 Edition",
			"content_html": "<p>There's been a <a href=\"https://francescoimprota.com/2023/06/13/my-tech-stack/\">lot</a> <a href=\"https://chriscoyier.net/2023/09/14/tool-picks/\">of</a> <a href=\"https://css-irl.info/cool-tools/\">folks</a> <a href=\"https://christianheilmann.com/2023/09/14/the-10-tools-i-install-on-every-new-mac-i-get/\">talking</a> recently about the tools that they use so I thought this would be a good time pull a Marie Kondo on everything that's rolling around in this machine to see if it still holds up to inspection. While several of these things won't spark joy, they should at least spark VALUE.</p>\n<h2 id=\"paper-planner-task-life-management\" tabindex=\"-1\"><a href=\"https://www.amazon.com/Blue-Sky-2023-2024-Enterprise-144720/dp/B0BS4869YR/\">Paper Planner</a>: Task/Life Management <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/nathan-uses-this-2023-edition/\">#</a></h2>\n<p>Alright, stay with me. My first tool choice has nothing to do with computers, but everything to do with planning. I've tried so many different planning tools (Todoist, Wunderlist, Trello, Workflowy, Things, Habitica, Remember the Milk, and even building my own system) and none of them have worked for me.</p>\n<p>There's too much input sprawl: emails, Slack, GitHub issues, JIRA issues, the one client that still insists on using BitBucket... And that's just work. We also have school events, play dates, practices, trips — things that exist outside of the computer that ALSO need to be tracked.</p>\n<p>Maybe I'll expand on this in the future, but my principle has become to manage the task at the source, but keep my goals, high-level items, and events in the planner.</p>\n<h2 id=\"tiddlywiki-notes-writing-journal-build-logs\" tabindex=\"-1\"><a href=\"https://tiddlywiki.com/\">TiddlyWiki</a>: Notes, Writing, Journal, Build Logs <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/nathan-uses-this-2023-edition/\">#</a></h2>\n<p>Things that need to stick around longer than a week go in my personal wiki powered by TiddlyWiki. Everything gets stored as flat files for backup, version control, and storage and I run the node module in the background to stitch it all together in an interactive interface for me. It's part <a href=\"https://zettelkasten.de/posts/overview/#the-introduction-to-the-zettelkasten-method\">zettelkessen</a>, part journal, part work dashboard. Because it's web-based, it's also easy to extend and style just how I  want it. It's become my second brain, I'm not sure I could function without it anymore...</p>\n<h2 id=\"wezterm-terminal\" tabindex=\"-1\"><a href=\"https://wezfurlong.org/wezterm/\">WezTerm</a>: Terminal <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/nathan-uses-this-2023-edition/\">#</a></h2>\n<p>Earlier this year I switched from iTerm2 to WezTerm, which says a lot because I spend ALLLLL day in the terminal. It's fast, can be scripted with Lua (which is continuing the pattern of Lua-fication in my life), has an external config file I can take with me, and has a host of nice-to-haves like: baked-in support for my favorite code theme (<a href=\"https://github.com/folke/tokyonight.nvim\">TokyoNight Storm</a>) and my favorite code font (<a href=\"https://www.jetbrains.com/lp/mono/\">JetBrains Mono</a>) without the need of font-patching for those sweet, sweet icons.</p>\n<h2 id=\"neovim-code-editor\" tabindex=\"-1\"><a href=\"https://neovim.io/\">NeoVim</a>: Code Editor <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/nathan-uses-this-2023-edition/\">#</a></h2>\n<p>I switched from Vim to NeoVim a few years ago and haven't looked back. I was leery of Lua at first, but NeoVim introduced some killer features that made the learning curve worthwhile. LSP support topped the charts for me, and there are some fantastic plugins like <a href=\"https://github.com/nvim-telescope/telescope.nvim\">Telescope</a>, <a href=\"https://github.com/nvim-treesitter/nvim-treesitter\">Treesitter</a>, and others.</p>\n<p>One of the main things that bother me in Neovim right now is that some languages (I'm looking at YOU, <a href=\"https://twig.symfony.com/\">Twig</a>) have terrible indent support. The rise of Prettier has helped in certain cases, but embedded languages continue to be a problem.</p>\n<h2 id=\"obs-visual-filters-for-remote-meetings\" tabindex=\"-1\"><a href=\"https://obsproject.com/\">OBS</a>: Visual filters for remote meetings <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/nathan-uses-this-2023-edition/\">#</a></h2>\n<p>Remember SnapCamera? Well, it's not around anymore. The funny filters helped inject some humor into the suddenly 100% remote meetings during the pandemic. Now I run OBS and can use overlays, gifs—basically whatever I want as a video source for meetings. Is this overkill? Yes. Is it fun? Also yes.</p>\n<h2 id=\"figma-and-the-affinity-suite-design\" tabindex=\"-1\"><a href=\"https://www.figma.com/\">Figma</a> and the <a href=\"https://affinity.serif.com/en-us/\">Affinity Suite</a>: Design <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/nathan-uses-this-2023-edition/\">#</a></h2>\n<p>When I first joined Viget in 2022 it was the first time I'd been without Adobe products since I was 15. It was equal parts shocking and liberating. Figma is one of the best interface design tools I've used. I fear for its future having been gobbled up by Adobe, but I'll continue to use it until there's a better option.</p>\n<p>Having started my career as a designer, I was used to being able to manipulate photos, documents, and layouts to do whatever I wanted. I have no desire to maintain a personal Adobe subscription so I turned to Affinity and their extremely reasonably priced suite of design tools. I've been happy with them and regularly reach for Designer for SVG work (Figma can be painful with complicated SVGs...)</p>\n<h2 id=\"buttondown-email-newsletters\" tabindex=\"-1\"><a href=\"https://buttondown.email/\">Buttondown</a>: Email newsletters <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/nathan-uses-this-2023-edition/\">#</a></h2>\n<p>There's a lot of choice when it comes to writing emails and maintaining a mailing list. I've used Mailchimp frequently for clients but I wasn't keen on maintaining a personal subscription. I found Buttondown through <a href=\"https://cassidoo.co/\">Cassidy Williams</a>'s newsletter and really liked the interface and features. It was the Goldilocks fit for what I wanted in maintaining an email newsletter.</p>\n<h2 id=\"feedly-rss-reader\" tabindex=\"-1\"><a href=\"https://feedly.com\">Feedly</a>: RSS reader <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/nathan-uses-this-2023-edition/\">#</a></h2>\n<p>This is one I feel okay about but might change in the future. Feedly is the best of the free readers and does what I need it to right now which is following the 341 sites I've loaded in there. I have no real complaints about it other than it just doesn't feel like it's MINE. Some features I DO like are the bits of social proof that are scattered across the interface, such as loose counts of just how many people are following a source and what's trending in different categories.</p>\n<h2 id=\"just-universal-command-runner\" tabindex=\"-1\"><a href=\"https://github.com/casey/just\">Just</a>: Universal command runner <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/nathan-uses-this-2023-edition/\">#</a></h2>\n<p>I was introduced to this utility about a year ago and it quickly replaced the gnarled file of zsh aliases I kept on my local machine. I use it to simplify long project commands (without having to constantly look them up) and doing some basic command automation.</p>\n<p>But its most important feature is its ability to serve as a universal interface between different projects. I can create the same recipes to start up local dev from a Rails project that I can to a React, Elixir, SSG-flavor-of-the-day, or whatever. So rather than trying to remember how to start up the server, I can hit my custom <code>just run</code> command, and BOOM—we're up and running.</p>\n<hr>\n<p>Welp, that's a few of my most used tools. It'll be interesting to check back in a year or so and see how these choices have played out.</p>\n",
			"date_published": "2023-09-20T00:00:00Z"
		}
		,
		{
			"id": "https://nathan-long.com/blog/building-motion-for-the-web/",
			"url": "https://nathan-long.com/blog/building-motion-for-the-web/",
			"title": "Building Motion for the Web",
			"content_html": "<p>I've recently been noodling on motion and its use in web interfaces. I've been frustrated that most examples and material you find about motion fall into a few common categories:</p>\n<ul>\n<li>Another rehash of Disney's motion principles</li>\n<li>Explanations of easing and CSS transitions</li>\n<li>Imaginary app interactions built entirely in prototyping tools</li>\n<li>Wild and technically complex demos that can be inscrutable. (Have fun reading that 3D shader algorithm...)</li>\n</ul>\n<p>It all seems to be very low-level, limited-scope implementations, or so high level you might as well be reading a Wikipedia article. Very rarely do you find material on how a team considered motion as part of their design ideation, how the designer and developers collaborated on bringing it to life, and how they convinced the stakeholders that the time spent was worth the effort...</p>\n<p>So I thought we should try to bridge that gap.</p>\n<p>What I'm most interested in is:</p>\n<ul>\n<li>Creating <strong>shared language</strong> around motion\n<ul>\n<li>(Have you tried having a conversation on how something should move?)</li>\n</ul>\n</li>\n<li>Empowering designers to be creative <strong>without</strong> blowing the entire development budget.\n<ul>\n<li>(&quot;Yes, all the things can move, but like THIS rather than like THAT...&quot;)</li>\n</ul>\n</li>\n<li>Create frameworks for <strong>talking to clients</strong> about motion and setting <strong>expectations</strong> around timing and cost.\n<ul>\n<li>(It never works if it's just tacked on at the end of a project or has no money allocated to it.)</li>\n</ul>\n</li>\n<li>Testing <strong>collaboration methods and deliverables</strong> around motion to widen our process toolkit\n<ul>\n<li>(Spoiler: I don't think high-fidelity motion prototypes are helpful to anyone but the client.)</li>\n</ul>\n</li>\n</ul>\n<p>I feel like THESE are the social, financial, and collaboration barriers that have to be overcome for any successful technology integration, but we seem to currently lack these tools for motion on the web.</p>\n<p>We've started a series over at Viget that I'm excited about as we work to explore these topics. The first post is here: <a href=\"https://www.viget.com/articles/building-motion-for-the-web-classifying/\">Building Motion for the Web: In the 'Zone'</a>. We explore classifications of motion characteristics in interfaces to start categorizing types of motion.</p>\n<p>Check it out, it's only getting started...</p>\n",
			"date_published": "2023-07-14T00:00:00Z"
		}
		,
		{
			"id": "https://nathan-long.com/blog/vite-rapid-prototype-starter-kits/",
			"url": "https://nathan-long.com/blog/vite-rapid-prototype-starter-kits/",
			"title": "Vite Rapid Prototyping Starter Kits",
			"content_html": "<p>One of the things I love about <a href=\"https://vitejs.dev/\">Vite</a> is how FAST it is to spin up. When I had the idea for my  <a href=\"https://nathan-long.com/sandclock/\">Sandclock</a> toy app (which I'll write about once I get a little further with it) I used the Vite React starter to quickly spin up a basic project. No configuration, no hunting for packages, just drop and go.</p>\n<p>This got me thinking about prototypes.</p>\n<h2 id=\"prototypes\" tabindex=\"-1\">Prototypes <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/vite-rapid-prototype-starter-kits/\">#</a></h2>\n<p>Sometimes when building a user interface a concept comes up that's a bit tricky to nail down. Our design tools are great at communicating static design but once you add motion or more complex functionality it can become harder to get collaborate.</p>\n<p>This is where I feel prototypes become valuable—getting buy-in on a difficult to explain concept. Splitting the concept from the codebase gives some freedom to get messy and iterate without causing a PR nesting tangle or a bunch of churn commits.</p>\n<p>I LOVE code playgrounds like <a href=\"https://codepen.io/\">CodePen</a>. They excel at sharing ideas, illustrating concepts, and exposing techniques — but as a rapid prototyping tool there's some friction between the playground and your final code. Especially if you're looking to port your code afterwards into a specific stack.</p>\n<p>Vite helps here in quickly spinning up a local dev environment with little to no config. You get your normal code editor and can plug in any stack you need. If you use one of their starter kits, it's just a one line script to get a full local playground up and running. Vite has the bases covered pretty well in terms of JS frameworks (Vue, React, Svelte, and more) — BUT there are a few patterns we use at Viget that aren't as widely covered like <a href=\"https://tailwindcss.com/\">Tailwind</a> + <a href=\"https://stimulus.hotwired.dev/\">Stimulus</a> and Vanilla JS with <a href=\"https://www.viget.com/articles/how-does-viget-javascript/\">Viget Modules</a>.</p>\n<h3 id=\"degit-ize-your-starter-kit\" tabindex=\"-1\">Degit-ize your Starter Kit <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/vite-rapid-prototype-starter-kits/\">#</a></h3>\n<p>In the Vite docs, they surface <a href=\"https://github.com/Rich-Harris/degit\">degit</a> (by Rich Harris) as a way to expand beyond the official Vite starters. It's a command-line utility that nabs clean copies of git repos but leaves all the history behind. We're looking forward, not backwards! It's a nice little utility that opens up the field for one-line installs for UNOFFICIAL starter kits... like these next two.</p>\n<h2 id=\"tailwind-and-stimulus\" tabindex=\"-1\">Tailwind and Stimulus <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/vite-rapid-prototype-starter-kits/\">#</a></h2>\n<p>At <a href=\"https://www.viget.com/\">Viget</a>, we're big fans of <a href=\"https://tailwindcss.com/\">Tailwind</a> and <a href=\"https://stimulus.hotwired.dev/\">Stimulus</a>.</p>\n<h3 id=\"tailwind\" tabindex=\"-1\">Tailwind <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/vite-rapid-prototype-starter-kits/\">#</a></h3>\n<p>Maybe one day I'll write an apologetics-style post about the reasons Tailwind is great, but for now I'll keep it short. Tailwind is massively composable, completely sidesteps any need for naming methodologies, and flattens out the selector specificity so it'll scale long-term on a project without gathering cruft. It's also portable in that you can write Tailwind in React, Vue, Svelte, but also Craft, Wordpress, custom Ruby apps, or any other system you'd like to use. That means as a team it's a common language that can we can spread on top of any stack we'll need to use.</p>\n<p>Tailwind is also well suited for prototypes. You can lift the HTML markup and classes and just port it into whatever you're working on — and it ought to just work. Even if you have custom classes and patterns, those are portable enough between projects, and if you need to RELY on project-specific setup you can just grab the project's <code>tailwind.config.js</code> into your prototype from the beginning!</p>\n<h3 id=\"stimulus\" tabindex=\"-1\">Stimulus <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/vite-rapid-prototype-starter-kits/\">#</a></h3>\n<p>Sometimes you don't need that much JavaScript. Rather than attempting to render the interface, Stimulus allows you to 'sprinkle' your interface with interactivity that loads only when needed. Like Tailwind, it augments HTML markup as the source of truth and when the two are paired together you can really jam on something without much file switching!</p>\n<h3 id=\"a-new-tailwind-stimulus-starter\" tabindex=\"-1\">A new Tailwind/Stimulus starter <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/vite-rapid-prototype-starter-kits/\">#</a></h3>\n<p>Given these team staples, I set about writing a Vite starter only to find my coworker, <a href=\"https://github.com/jeremyfrank\">Jeremy Frank</a>, had already created one!</p>\n<p>Check it out <a href=\"https://github.com/jeremyfrank/vite-tailwind-stimulus-starter\">on Github here</a>.</p>\n<p>And with degit, you can one-line it with:</p>\n<pre class=\"feature language-sh\"><code class=\"language-sh\">degit jeremyfrank/vite-tailwind-stimulus-starter my-new-project</code></pre>\n<h2 id=\"vanilla-all-the-things\" tabindex=\"-1\">Vanilla All the Things <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/vite-rapid-prototype-starter-kits/\">#</a></h2>\n<p>OK, so this isn't really a tech stack as it is buy-in into the platform itself. CSS and JS have come a long way in the last several years.</p>\n<h3 id=\"css\" tabindex=\"-1\">CSS <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/vite-rapid-prototype-starter-kits/\">#</a></h3>\n<p>In CSS we have variables, grid, powerful selectors like <code>has()</code> (ALMOST here) and <code>not()</code>, and amazing features like <code>clamp()</code> that remove many of the original reasons we used a pre-processor like SASS. And just look at these <a href=\"https://developer.chrome.com/blog/whats-new-css-ui-2023/\">new things for CSS in 2023</a> like this <code>popover</code> <a href=\"https://developer.chrome.com/blog/introducing-popover-api/\">demo from Una Kravets</a>. How can you not be excited about all this?!</p>\n<h3 id=\"javascript\" tabindex=\"-1\">JavaScript <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/vite-rapid-prototype-starter-kits/\">#</a></h3>\n<p>A few years ago the Viget team developed a pattern called <a href=\"https://www.viget.com/articles/how-does-viget-javascript/\">Viget Modules</a> that tap into <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import\">dynamic imports</a> to load only the modules needed on a page. Don't need it? Don't load it!</p>\n<p>Originally, Webpack worked it's magic to chunk and bundle everything, but now with native ESM support in browsers we can ship these independent modules WITHOUT a bundler. Which means this approach could work without a build system at all!</p>\n<p>While we've largely replaced Viget Modules with Stimulus controllers in production sites, I have found that when learning new API's or techniques it is easier to clear away all the magic to better understand what's actually going on in the browser.</p>\n<p>This also ensures that whatever you're writing isn't going to be subject to a third-party's opinions of how things ought to be. It's just you and the browser.</p>\n<p>You can check out my <a href=\"https://github.com/nathanlong/vite-vanilla\">vanilla starter kit here</a>.</p>\n<p>And with degit, you can one-line it with:</p>\n<pre class=\"feature language-sh\"><code class=\"language-sh\">degit nathanlong/vite-vanilla my-new-project</code></pre>\n<h2 id=\"extra-credit-prototype-junk-drawer\" tabindex=\"-1\">Extra Credit: Prototype Junk Drawer <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/vite-rapid-prototype-starter-kits/\">#</a></h2>\n<p>We've now got several options on how we want to roll our quick prototype kits, but what if we took it one step further?</p>\n<p>We could transform all these one-line starter commands with <code>degit</code> into aliases, OR... <a href=\"https://just.systems/man/en/\">we could use <code>just</code></a> to pull together a prototype directory where we can make those one lines EVEN SHORTER.</p>\n<p>Check out this <code>justfile</code>:</p>\n<pre class=\"feature language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># react prototype from the official vite docs</span>\nreact target:\n  @echo <span class=\"token string\">'Creating React prototype in {{target}}…'</span>\n  <span class=\"token function\">npm</span> create vite@latest <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> -- <span class=\"token parameter variable\">--template</span> react\n  <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n  @echo <span class=\"token string\">'Start dev with: npm run dev'</span>\n\n<span class=\"token comment\"># stimulus prototype (custom starter)</span>\nstimulus target:\n  @echo <span class=\"token string\">'Creating Stimulus prototype in {{target}}…'</span>\n  degit jeremyfrank/vite-tailwind-stimulus-starter <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n  @echo <span class=\"token string\">'Start dev with: npm run dev'</span>\n\n<span class=\"token comment\"># vanilla prototype (custom starter)</span>\nvanilla target:\n  @echo <span class=\"token string\">'Creating Vanilla prototype in {{target}}…'</span>\n  degit nathanlong/vite-vanilla <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n  @echo <span class=\"token string\">'Start dev with: npm run dev'</span></code></pre>\n<p>Now instead of even having to remember the repo paths you can plop into your <s>junk drawer</s> prototyping directory and start a prototype with something like:</p>\n<pre class=\"feature language-sh\"><code class=\"language-sh\">just stimulus my-awesome-prototype</code></pre>\n<p>Happy prototyping!</p>\n",
			"date_published": "2023-06-16T00:00:00Z"
		}
		,
		{
			"id": "https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/",
			"url": "https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/",
			"title": "Setting up LSPs for Modern JavaScript Tooling in Neovim",
			"content_html": "<p>It's no secret that I love Vim. I've been using it since I started in the industry, but rather than talking about WHY I love it so much (that feels like a separate post) let's talk about adding some key modern features of a code editor for writing JavaScript.</p>\n<blockquote>\n<p><strong>Note:</strong> These features are going to require us to run with <a href=\"https://neovim.io/\">Neovim</a>, a relatively recent retooling of <a href=\"https://www.vim.org/\">Vim</a>, the modal editor that's been in active development since the 90's! <small>(Such sleek, much wow, very powerful... 🐕)</small></p>\n</blockquote>\n<p>We're going to nab:</p>\n<ul>\n<li><strong>Intellisense-style code-completion</strong> and hinting for:\n<ul>\n<li>JavaScript, HTML, CSS, ESLint, and JSON</li>\n</ul>\n</li>\n<li><strong>Powerful language actions</strong> and methods for displaying info and jumping around in your code.</li>\n<li><strong>Linters</strong> that will <s>tell you how wrong you are</s> help you write better code.</li>\n<li><strong>Auto code-formatting</strong> with Prettier.</li>\n</ul>\n<p>What you'll need:</p>\n<ul>\n<li><strong><a href=\"https://neovim.io/\">Neovim</a></strong> (for LSP support).</li>\n<li>A little bit of <strong>Lua</strong> code (don't worry, if I can parse it you can too).</li>\n<li>Some familiarity with installing utilities via the <strong>command line</strong>.</li>\n</ul>\n<h2 id=\"lsp-s-you-magical-beasties\" tabindex=\"-1\">LSP's, you magical beasties... <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">#</a></h2>\n<p>A lot of the features we're interested in come from the <a href=\"https://microsoft.github.io/language-server-protocol/\">Language Server Protocol</a> or LSP developed by Microsoft. They act as language-specific 'brains' that an editor (like Visual Studio Code) can communicate with for all sorts of handy language features.</p>\n<p>This is the tech behind <strong>Intellisense</strong> completion, and it's also supported in Neovim. We're going to be nabbing these brains for ourselves with the help of NPM.</p>\n<p>There are 4 LSP's that we're interested in today:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/typescript\">TypeScript</a> - Why TypeScript? Well, it has inside of it many language features that work for vanilla JavaScript, not JUST TypeScript.</li>\n<li><a href=\"https://www.npmjs.com/package/typescript-language-server\">typescript-language-server</a> - works with TypeScript to provide those language features for JavaScript</li>\n<li><a href=\"https://www.npmjs.com/package/vscode-langservers-extracted\">vscode-langservers-extracted</a> - This is a combo bundle. The fine folks at Microsoft wrote LSPs for HTML, CSS, JSON, and added ESLint support while they were at it.</li>\n<li><a href=\"https://www.npmjs.com/package/@tailwindcss/language-server\">@tailwindcss/language-server</a> - (optional) We use <a href=\"https://tailwindcss.com/\">Tailwind</a> quite a bit at <a href=\"https://www.viget.com/\">Viget</a>, and this gives us powerful autocompletion which is a MUST with Tailwind, but if this isn't your cup of tea you can leave this one off.</li>\n</ul>\n<p>We're going to install everything globally with this command:</p>\n<pre class=\"feature language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> typescript-language-server typescript vscode-langservers-extracted @tailwindcss/language-server</code></pre>\n<p>(I'm using <code>npm</code> to install modules in this example, but you can use whatever package manager you prefer. The point is you just need these globally installed so you can access them from Neovim. These LSP's are just a small sampling of what's available, see the docs at <a href=\"https://github.com/neovim/nvim-lspconfig\">nvim-lspconfig</a> for ways to install and configure more LSPs)</p>\n<p>Now that we have these magical language 🧠's available globally we need to connect them to Neovim.</p>\n<h2 id=\"connecting-neovim\" tabindex=\"-1\">Connecting Neovim <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">#</a></h2>\n<p>We'll be installing Neovim plugins to help attach everything. The plugin manager I'm using here is <a href=\"https://github.com/wbthomason/packer.nvim\">Packer</a>, but these will work with any other plugin manager as well.</p>\n<p>We're also going to be writing the setup and configurations of these plugins in Lua because most of them are written in Lua themselves. However, there's no need to swap out your <code>init.vim</code> (vimscript-based config equivalent of <code>.vimrc</code> for Neovim) for <code>init.lua</code> just yet. Neovim gives you the option to write Lua blocks inside of Vimscript like:</p>\n<pre class=\"feature language-lua\"><code class=\"language-lua\">lua <span class=\"token operator\">&lt;&lt;</span> EOF\n  <span class=\"token comment\">-- all your lua config here</span>\n<span class=\"token keyword\">end</span></code></pre>\n<p>So if you're rocking Vimscript, make sure to wrap the following setup in the Lua markers.</p>\n<h3 id=\"install-the-plugins\" tabindex=\"-1\">Install the plugins <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">#</a></h3>\n<pre class=\"feature language-lua\"><code class=\"language-lua\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'packer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>use<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">-- ...other plugins before and after...</span>\n  <span class=\"token comment\">--</span>\n  <span class=\"token comment\">-- LSP integration and autocomplete</span>\n  use <span class=\"token string\">'neovim/nvim-lspconfig'</span>\n  use <span class=\"token string\">'hrsh7th/nvim-cmp'</span>\n  use <span class=\"token string\">'hrsh7th/cmp-nvim-lsp'</span>\n  use <span class=\"token string\">'hrsh7th/cmp-nvim-lsp-signature-help'</span>\n  use <span class=\"token string\">'hrsh7th/cmp-buffer'</span>\n  use <span class=\"token string\">'hrsh7th/cmp-path'</span>\n  <span class=\"token comment\">-- Prettier</span>\n  <span class=\"token function\">use</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'prettier/vim-prettier'</span><span class=\"token punctuation\">,</span>\n    run <span class=\"token operator\">=</span> <span class=\"token string\">'yarn install --frozen-lockfile --production'</span><span class=\"token punctuation\">,</span>\n    ft <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'javascript'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'typescript'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scss'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'graphql'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'markdown'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yaml'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Plugin</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://github.com/neovim/nvim-lspconfig\">nvim-lspconfig</a></td>\n<td style=\"text-align:left\">Officially supported LSP quickstart configs</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://github.com/hrsh7th/nvim-cmp\">nvim-cmp</a></td>\n<td style=\"text-align:left\">The completion engine we'll be using for everything</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://github.com/hrsh7th/cmp-nvim-lsp\">cmp-nvim-lsp</a></td>\n<td style=\"text-align:left\">This is a 'source' plugin for our complete engine, <code>nvim-cmp</code>. This allows it to use the LSPs (required)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://github.com/hrsh7th/cmp-nvim-lsp-signature-help\">cmp-nvim-lsp-signature-help</a></td>\n<td style=\"text-align:left\">A helper source that will auto-hint at function arguments for us (optional)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://github.com/hrsh7th/cmp-buffer\">cmp-buffer</a></td>\n<td style=\"text-align:left\">While we're at it, another source plugin that allows autocompletion from the buffer itself (optional)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://github.com/hrsh7th/cmp-path\">cmp-path</a></td>\n<td style=\"text-align:left\">Another source plugin to help complete file system paths (optional)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://github.com/prettier/vim-prettier\">Prettier</a></td>\n<td style=\"text-align:left\">Officially maintained auto-formatting utility for a variety of languages, what we're doing here is actually only activating it for certain filetypes</td>\n</tr>\n</tbody>\n</table>\n<p><strong>One note about Prettier:</strong> You may have noticed we did not install Prettier globally. TYPICALLY you'll be running Prettier from a local project installation, and this setup will hook into a project that has Prettier installed. But if you want to use Prettier outside of a project config, you can also install a version globally that you can use without modifying project dependencies. We'll come back to Prettier a little later on.</p>\n<h3 id=\"activate-the-plugins\" tabindex=\"-1\">Activate the plugins <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">#</a></h3>\n<p>If you haven't worked with Lua plugins before they differ from traditional Vim plugins in the fact that they're not active by default, you have to call them (and optionally pass configuration options) before they'll attach themselves to your session. This allows for you to selectively load plugins per filetype or any other fancy options you might need.</p>\n<p>Inside of your <code>init.vim</code> or <code>init.lua</code> add the following:</p>\n<h4 id=\"lsp-config\" tabindex=\"-1\">LSP Config <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">#</a></h4>\n<pre class=\"feature language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- LSP Mappings + Settings -----------------------------------------------------</span>\n<span class=\"token comment\">-- modified from: https://github.com/neovim/nvim-lspconfig#suggested-configuration</span>\n<span class=\"token keyword\">local</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> noremap<span class=\"token operator\">=</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> silent<span class=\"token operator\">=</span><span class=\"token keyword\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">-- Basic diagnostic mappings, these will navigate to or display diagnostics</span>\nvim<span class=\"token punctuation\">.</span>keymap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;space>d'</span><span class=\"token punctuation\">,</span> vim<span class=\"token punctuation\">.</span>diagnostic<span class=\"token punctuation\">.</span>open_float<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\nvim<span class=\"token punctuation\">.</span>keymap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'[d'</span><span class=\"token punctuation\">,</span> vim<span class=\"token punctuation\">.</span>diagnostic<span class=\"token punctuation\">.</span>goto_prev<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\nvim<span class=\"token punctuation\">.</span>keymap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">']d'</span><span class=\"token punctuation\">,</span> vim<span class=\"token punctuation\">.</span>diagnostic<span class=\"token punctuation\">.</span>goto_next<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\nvim<span class=\"token punctuation\">.</span>keymap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;space>q'</span><span class=\"token punctuation\">,</span> vim<span class=\"token punctuation\">.</span>diagnostic<span class=\"token punctuation\">.</span>setloclist<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- Use an on_attach function to only map the following keys</span>\n<span class=\"token comment\">-- after the language server attaches to the current buffer</span>\n<span class=\"token keyword\">local</span> on_attach <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> bufnr<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">-- Enable completion triggered by &lt;c-x>&lt;c-o></span>\n  vim<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">nvim_buf_set_option</span><span class=\"token punctuation\">(</span>bufnr<span class=\"token punctuation\">,</span> <span class=\"token string\">'omnifunc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v:lua.vim.lsp.omnifunc'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">-- Mappings to magical LSP functions!</span>\n  <span class=\"token keyword\">local</span> bufopts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> noremap<span class=\"token operator\">=</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> silent<span class=\"token operator\">=</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> buffer<span class=\"token operator\">=</span>bufnr <span class=\"token punctuation\">}</span>\n  vim<span class=\"token punctuation\">.</span>keymap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gD'</span><span class=\"token punctuation\">,</span> vim<span class=\"token punctuation\">.</span>lsp<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">.</span>declaration<span class=\"token punctuation\">,</span> bufopts<span class=\"token punctuation\">)</span>\n  vim<span class=\"token punctuation\">.</span>keymap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gd'</span><span class=\"token punctuation\">,</span> vim<span class=\"token punctuation\">.</span>lsp<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">.</span>definition<span class=\"token punctuation\">,</span> bufopts<span class=\"token punctuation\">)</span>\n  vim<span class=\"token punctuation\">.</span>keymap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gk'</span><span class=\"token punctuation\">,</span> vim<span class=\"token punctuation\">.</span>lsp<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">.</span>hover<span class=\"token punctuation\">,</span> bufopts<span class=\"token punctuation\">)</span>\n  vim<span class=\"token punctuation\">.</span>keymap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gi'</span><span class=\"token punctuation\">,</span> vim<span class=\"token punctuation\">.</span>lsp<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">,</span> bufopts<span class=\"token punctuation\">)</span>\n  vim<span class=\"token punctuation\">.</span>keymap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gK'</span><span class=\"token punctuation\">,</span> vim<span class=\"token punctuation\">.</span>lsp<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">.</span>signature_help<span class=\"token punctuation\">,</span> bufopts<span class=\"token punctuation\">)</span>\n  vim<span class=\"token punctuation\">.</span>keymap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;space>D'</span><span class=\"token punctuation\">,</span> vim<span class=\"token punctuation\">.</span>lsp<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">.</span>type_definition<span class=\"token punctuation\">,</span> bufopts<span class=\"token punctuation\">)</span>\n  vim<span class=\"token punctuation\">.</span>keymap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;space>rn'</span><span class=\"token punctuation\">,</span> vim<span class=\"token punctuation\">.</span>lsp<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">,</span> bufopts<span class=\"token punctuation\">)</span>\n  vim<span class=\"token punctuation\">.</span>keymap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;space>ca'</span><span class=\"token punctuation\">,</span> vim<span class=\"token punctuation\">.</span>lsp<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">.</span>code_action<span class=\"token punctuation\">,</span> bufopts<span class=\"token punctuation\">)</span>\n  vim<span class=\"token punctuation\">.</span>keymap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gr'</span><span class=\"token punctuation\">,</span> vim<span class=\"token punctuation\">.</span>lsp<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">.</span>references<span class=\"token punctuation\">,</span> bufopts<span class=\"token punctuation\">)</span>\n  vim<span class=\"token punctuation\">.</span>keymap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;space>f'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> vim<span class=\"token punctuation\">.</span>lsp<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span> <span class=\"token punctuation\">{</span> async <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> bufopts<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- The nvim-cmp almost supports LSP's capabilities so You should advertise it to LSP servers..</span>\n<span class=\"token keyword\">local</span> capabilities <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cmp_nvim_lsp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">default_capabilities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- Capabilities required for the visualstudio lsps (css, html, etc)</span>\ncapabilities<span class=\"token punctuation\">.</span>textDocument<span class=\"token punctuation\">.</span>completion<span class=\"token punctuation\">.</span>completionItem<span class=\"token punctuation\">.</span>snippetSupport <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\n\n<span class=\"token comment\">-- Activate LSPs</span>\n<span class=\"token comment\">-- All LSPs in this list need to be manually installed via NPM/PNPM/whatevs</span>\n<span class=\"token keyword\">local</span> lspconfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lspconfig'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> servers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'tailwindcss'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tsserver'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jsonls'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eslint'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> lsp <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>servers<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  lspconfig<span class=\"token punctuation\">[</span>lsp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span> <span class=\"token punctuation\">{</span>\n    on_attach <span class=\"token operator\">=</span> on_attach<span class=\"token punctuation\">,</span>\n    capabilites <span class=\"token operator\">=</span> capabilities<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- This is an interesting one, for some reason these two LSPs (CSS/HTML) need to</span>\n<span class=\"token comment\">-- be activated separately outside of the above loop. If someone can tell me why,</span>\n<span class=\"token comment\">-- send me a note...</span>\nlspconfig<span class=\"token punctuation\">.</span>cssls<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span> <span class=\"token punctuation\">{</span>\n  on_attach <span class=\"token operator\">=</span> on_attach<span class=\"token punctuation\">,</span>\n  capabilities <span class=\"token operator\">=</span> capabilities\n<span class=\"token punctuation\">}</span>\n\nlspconfig<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span> <span class=\"token punctuation\">{</span>\n  on_attach <span class=\"token operator\">=</span> on_attach<span class=\"token punctuation\">,</span>\n  capabilities <span class=\"token operator\">=</span> capabilities\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Awesome, that's the LSP setup. We now have LSP's activated and attached -- but they're not going to autocompleting yet. We need to set up <code>nvim-cmp</code>. But to do that we also need to specify a snippet engine.</p>\n<h4 id=\"snippet-setup\" tabindex=\"-1\">Snippet Setup <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">#</a></h4>\n<p>Now, you don't NEED <code>LuaSnip</code> specifically for <code>nvim-cmp</code>, but you do need A snippet engine (<code>nvim-cmp</code> requires one 🤷). I've chosen <code>LuaSnip</code> for it's ease of use and power, which I may cover in a future article. For now let's set it up:</p>\n<pre class=\"feature language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- Luasnip ---------------------------------------------------------------------</span>\n<span class=\"token comment\">-- Load as needed by filetype by the luasnippets folder in the config dir</span>\n<span class=\"token keyword\">local</span> luasnip <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"luasnip\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"luasnip.loaders.from_lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lazy_load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- set keybinds for both INSERT and VISUAL.</span>\nvim<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">nvim_set_keymap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;C-n>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;Plug>luasnip-next-choice\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nvim<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">nvim_set_keymap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;C-n>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;Plug>luasnip-next-choice\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nvim<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">nvim_set_keymap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;C-p>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;Plug>luasnip-prev-choice\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nvim<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">nvim_set_keymap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;C-p>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;Plug>luasnip-prev-choice\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Set this check up for nvim-cmp tab mapping</span>\n<span class=\"token keyword\">local</span> has_words_before <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">local</span> line<span class=\"token punctuation\">,</span> col <span class=\"token operator\">=</span> <span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>vim<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">nvim_win_get_cursor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> col <span class=\"token operator\">~=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> vim<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">nvim_buf_get_lines</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span>\n<span class=\"token keyword\">end</span></code></pre>\n<h4 id=\"autocomplete-setup\" tabindex=\"-1\">Autocomplete Setup <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">#</a></h4>\n<p>Almost done! Now we just need to activate <code>nvim-cmp</code> and feed it both our LSP and other sources, and create some keymappings:</p>\n<pre class=\"feature language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- CMP - Autocompletion --------------------------------------------------------</span>\n<span class=\"token keyword\">local</span> cmp <span class=\"token operator\">=</span> require <span class=\"token string\">'cmp'</span>\ncmp<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span> <span class=\"token punctuation\">{</span>\n  snippet <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    expand <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n       <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'luasnip'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lsp_expand</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- For `luasnip` users.</span>\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mapping <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;C-p>'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">.</span><span class=\"token function\">select_prev_item</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;C-n>'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">.</span><span class=\"token function\">select_next_item</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;C-d>'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">.</span><span class=\"token function\">scroll_docs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;C-f>'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">.</span><span class=\"token function\">scroll_docs</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;C-Space>'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;C-e>'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;CR>'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">.</span><span class=\"token function\">confirm</span> <span class=\"token punctuation\">{</span>\n      behavior <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span>ConfirmBehavior<span class=\"token punctuation\">.</span>Replace<span class=\"token punctuation\">,</span>\n      select <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;Tab>\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span><span class=\"token function\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>fallback<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> cmp<span class=\"token punctuation\">.</span><span class=\"token function\">visible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n        cmp<span class=\"token punctuation\">.</span><span class=\"token function\">select_next_item</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">elseif</span> luasnip<span class=\"token punctuation\">.</span><span class=\"token function\">expand_or_jumpable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n        luasnip<span class=\"token punctuation\">.</span><span class=\"token function\">expand_or_jump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">elseif</span> <span class=\"token function\">has_words_before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n        cmp<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"s\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;S-Tab>\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span><span class=\"token function\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>fallback<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> cmp<span class=\"token punctuation\">.</span><span class=\"token function\">visible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n        cmp<span class=\"token punctuation\">.</span><span class=\"token function\">select_prev_item</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">elseif</span> luasnip<span class=\"token punctuation\">.</span><span class=\"token function\">jumpable</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n        luasnip<span class=\"token punctuation\">.</span><span class=\"token function\">jump</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"s\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  sources <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'nvim_lsp'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'nvim_lsp_signature_help'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'luasnip'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'buffer'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'path'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Aaaaay, now we have LSP-assisted autocomplete working! 😎 We've set up some smart mappings specifically around <code>&lt;Tab&gt;</code> and <code>&lt;S-Tab&gt;</code> to allow <code>nvim-cmp</code> to quickly cycle through options, and we've fed all of our sources into the completion engine.</p>\n<h3 id=\"prettier-setup\" tabindex=\"-1\">Prettier Setup <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">#</a></h3>\n<p>And lastly, lets activate and make some keybindings for Prettier:</p>\n<pre class=\"feature language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- Prettier</span>\n<span class=\"token function\">keymap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;leader>re\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;Plug>(Prettier)\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n<span class=\"token function\">keymap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;leader>re\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":PrettierFragment&lt;cr>\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span></code></pre>\n<p>If it's more helpful to see everything all together, you can take a peek at <a href=\"https://github.com/nathanlong/dotfiles/blob/main/nvim/init.lua\">my personal Neovim config</a>, just know that it may deviate slightly from these instructions as I'm always tinkering.</p>\n<h2 id=\"that-s-great-but-what-can-i-do-with-these-things\" tabindex=\"-1\">That's great, but what can I DO with these things? <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">#</a></h2>\n<p>Each one of these things we just installed and connected will allow to some truly magical actions.</p>\n<h3 id=\"language-powered-extensible-autocompletion-nvim-cmp-lsp\" tabindex=\"-1\">Language-Powered Extensible autocompletion (nvim-cmp + LSP) <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">#</a></h3>\n<p>If you've seen someone use VSCode, you have seen this in action. Language keywords are automatically provided for you as you type, and more than that: it KNOWS your code base. If you've correctly formatted your code, the autocomplete popups will be able to tell you what types of arguments the function requires, grab methods and functions from imported code, and just overall better autocomplete.</p>\n<p>But YOU get to pick what goes in there. If you need something like Elixir and Erlang support, there are <a href=\"https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#elixirls\">LSP's for that</a>. This system will allow you to grab whatever completion brains you want and plug them into your new system.</p>\n<h3 id=\"super-language-powers\" tabindex=\"-1\">Super Language Powers <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">#</a></h3>\n<p>There are a lot of powerful features hidden in the LSPs that are not obvious at first. We bound a lot of these commands to key mappings in our config files, here are a few of them explained:</p>\n<ul>\n<li><strong>Buffer Hover</strong> = Display a tooltip for what your cursor is on. Helpful for things like seeing the expanded Tailwind CSS definitions or a bit of info about a piece of code. Very handy.</li>\n<li><strong>Buffer Implementation</strong> = Open a quickfix window of everywhere in the current file what your cursor is over has been implemented (not the same as referenced, there's a different command for that 😆).</li>\n<li><strong>Buffer Definition</strong> = Jumps to the definition of what your cursor is currently over. You can jump back to a variable or function definition.</li>\n<li><strong>Buffer Type Definition</strong> = Jumps to the definition of the type you're on.</li>\n<li><strong>Buffer Rename</strong> = Rename what's under your cursor everywhere. Incredibly handy!</li>\n<li><strong>Signature Help</strong> = Displays function signatures with the current parameter emphasized. Can't remember what arguments a function takes? Activate signature help and it'll tell you!</li>\n<li><strong>Code Action</strong> = This one is interesting. It's context sensitive command that will give you a list of things that can be done for a diagnostic error and can actually fix an issue for you or provide recommendations!</li>\n<li><strong>Buffer Reference</strong> = Create a quickfix window for all references for what your cursor is on.</li>\n<li><strong>Buffer Format</strong> = This one can also be pretty magical. This command can do some basic clean up and formatting for you. Think of it as Prettier-Lite™️</li>\n</ul>\n<h3 id=\"linting-in-context\" tabindex=\"-1\">Linting In Context <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">#</a></h3>\n<p>We didn't address it directly, but part of the <code>vscode-langservers-extracted</code> package included <code>eslint</code>. Through the LSP integration, diagnostics will output directly alongside your JavaScript so you can see <s>when you've made a terrible mistake</s> when your code could be improved. This setup also gives you an easy way to navigate through diagnostic errors (We bound them to <code>[d</code> and <code>]d</code> in the config files) and even have some quick LSP-assisted resolution through Code Actions.</p>\n<h3 id=\"auto-formatting-prettier\" tabindex=\"-1\">Auto-formatting (Prettier) <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">#</a></h3>\n<p>Alright, this is more subjective than the other benefits, but stick with me here for a 🔥 <strong>hot take</strong> 🔥.</p>\n<p>While <a href=\"https://prettier.io/\">Prettier</a> isn't perfect, it does have a valuable function: it completely removes arbitrary and subjective formatting differences when working on a team.</p>\n<p>Tabs/Spaces? (Foh-get a-bout eet) Spaces around argument options? (Naht to woo-ray, hun). Entire PR's littered with whitespace adjustments? (Ne-vah agaihns). Write the code how you want to while you're hacking away, then, when you're done, have the formatter clean it up and snap it into alignment with team standards (collected in the <code>.pretterrc</code>). It's like a robot butler for your code, and while it may not put everything back where YOU would put it you can also know that it's doing the same thing for everyone else. And that's a lot harder to get stuck on.</p>\n<h2 id=\"conclusion\" tabindex=\"-1\">Conclusion <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/\">#</a></h2>\n<p>The support of LSP's is one of the main reasons I hopped onboard the Neovim train. After seeing how nice the JavaScript experience is in Visual Studio Code and the power of what LSP's allow you to do with your code I was sold. When you're styling a user interface in TailwindCSS or working in a Next.js app, having the lightning fast autocomplete along with quick hopping, output previews, and contextual linting... It turns Neovim into a rocket ship for writing modern JavaScript!</p>\n",
			"date_published": "2023-02-23T00:00:00Z"
		}
		,
		{
			"id": "https://nathan-long.com/blog/owning-my-voice/",
			"url": "https://nathan-long.com/blog/owning-my-voice/",
			"title": "Owning My Voice",
			"content_html": "<p>Take a quick nostalgia trip with me...</p>\n<p>Back when I started my career in this industry, the web was my starry-eyed, fairy-winged teacher:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Molly_Holzschlag\">Molly Holzschlag</a> helped me take my first baby-steps with HTML and CSS.</li>\n<li>I learned responsive web design from <a href=\"https://ethanmarcotte.com/\">Ethan Marcotte</a>'s <a href=\"https://alistapart.com/article/responsive-web-design/\">articles</a>.</li>\n<li><a href=\"https://adactio.com/\">Jeremy Keith</a> taught me the new things in <a href=\"https://html5forwebdesigners.com/\">HTML5</a>.</li>\n<li><a href=\"https://www.lukew.com/\">Luke Wroblewski</a> taught me how to build '<a href=\"https://www.lukew.com/presos/preso.asp?26\">mobile first</a>'.</li>\n<li><a href=\"http://rachelnabors.com/\">Rachel Nabors's</a> continued efforts in animation inspired me to also see what could be done in the browser.</li>\n<li><a href=\"https://chriscoyier.net/\">Chris Coyier</a> schooled me on the deeper parts of CSS with <a href=\"https://css-tricks.com/\">CSS Tricks</a>.</li>\n</ul>\n<p>At some point (perhaps when Google Reader was shut down in 2013?) everything started to shift to social media. Particularly Twitter. In many ways it felt like an evolution—the barrier to communication was dropping. I could @mention <a href=\"https://www.paulirish.com/\">Paul Irish</a> or <a href=\"https://www.sarasoueidan.com/\">Sarah Soueidan</a> and they might ACTUALLY RESPOND. 😵‍💫</p>\n<h2 id=\"waking-up-in-the-dark-forest\" tabindex=\"-1\">Waking up in the Dark Forest <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/owning-my-voice/\">#</a></h2>\n<p>But things slowly changed while I wasn't looking. If the web was once this weird and <a href=\"http://www.csszengarden.com/\">magical garden</a> it slowly turned into what <a href=\"https://maggieappleton.com/\">Maggie Appleton</a> (and <a href=\"https://onezero.medium.com/the-dark-forest-theory-of-the-internet-7dc3e68a7cb1\">others</a>) now describe as the <strong><a href=\"https://maggieappleton.com/cozy-web\">Dark Forest</a></strong>. It's not safe there. The tech giants prey on you and your personal data. Engaging in open debate is meaningless at BEST. Trolls are lurking in the comment sections. Being yourself out THERE can be like inviting the worst of the internet onto your back porch.</p>\n<p>At some point I was no longer reading updates from people I knew or cared about but getting lost endless amounts of shallow-yet-mildly-amusing content or <a href=\"https://en.wikipedia.org/wiki/Doomscrolling\">doomscrolling</a> through emotionally incendiary material.</p>\n<h2 id=\"are-we-human-or-are-we-robot\" tabindex=\"-1\">Are we human? Or are we <code>robot?</code> <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/owning-my-voice/\">#</a></h2>\n<p>I was no longer in control what I was ingesting. The robots were feeding me what they were trained to surface. <code>And I liked it.</code> Well, at first anyways.</p>\n<p>Unfortunately it <a href=\"https://maggieappleton.com/ai-dark-forest\">seems like it's going to get worse</a>. The Dark Forest is about to be overrun with bots through the brilliant yet terrifying engines of <a href=\"https://openai.com/blog/chatgpt/\">ChatGPT</a>, <a href=\"https://www.midjourney.com/home/\">Midjourney</a>, <a href=\"https://openai.com/dall-e-2/\">DALL-E</a>, <a href=\"https://en.wikipedia.org/wiki/Stable_Diffusion\">Stable Diffusion</a> and others. It's going to be hard to tell what is made by real humans, and what is bot-generated in a flood of unoriginal content.</p>\n<p>Combine that with the <a href=\"https://twitter.com/garius/status/1588115310124539904?s=46&amp;t=OH02ZwWUxJOQs9Z6MTQCug\">trust thermocline</a> in our industry giants and it's not looking so nice out there right now.</p>\n<h2 id=\"owning-my-voice\" tabindex=\"-1\">Owning My Voice <a class=\"header-anchor\" href=\"https://nathan-long.com/blog/owning-my-voice/\">#</a></h2>\n<p>They say that <a href=\"https://matthiasott.com/notes/the-year-of-the-personal-website\">2023 is the year of personal website</a>. <a href=\"https://bringback.blog/\">There is a call</a> for individuals to start owning their spaces and <a href=\"https://www.theverge.com/23513418/bring-back-personal-blogging\">owning their voices again</a>.</p>\n<p>To me that was part of the magic of the web when I first entered the industry: unique voices with unique ideas in highly personalized spaces. That's why I'm dusting off this website and being more intentional about using it to own my voice on the web and create connections.</p>\n<blockquote>\n<p>“Don’t do it like me. Do it like you.”</p>\n<p><cite><a href=\"https://matthiasott.com/articles/into-the-personal-website-verse\">Matthias Ott</a> - User Experience Designer</cite></p>\n</blockquote>\n<p>This blog is hosted on <a href=\"https://pages.github.com/\">Github Pages</a> and built with <a href=\"https://www.11ty.dev/\">11ty</a> but there are so many other ways to create your space, even if you're not a developer:</p>\n<ul>\n<li><a href=\"https://ghost.org/\">Ghost CMS</a> - slick, content focused interface</li>\n<li><a href=\"https://webflow.com/\">Webflow</a> - a no-code solution with a free starter plan</li>\n<li><a href=\"https://hotglue.me/\">Hotglue.me</a> - charmingly wild no-code platform</li>\n<li><a href=\"https://mmm.page/\">mmm.page</a> - drag and drop website builder</li>\n<li>Wordpress - in either <a href=\"https://wordpress.org/\">self-hosted</a> or <a href=\"https://wordpress.com/\">ready-to-go</a> form</li>\n</ul>\n<p>I plan to use this space to experiment, get <code>weird</code>, actually work on my improving my meme-damaged writing skills, and highlight unique ideas from other folks who are also working to own their voices.</p>\n<p>I hope to see more doing the same, because THAT'S the web I fell in love with. Who knows, maybe they'll even bring Google Reader back... <code>:troll:</code></p>\n",
			"date_published": "2023-01-31T00:00:00Z"
		}
		
	]
}
